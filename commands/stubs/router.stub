<?php

namespace WHMCS\Module\Addon\$addonName\app;
include __DIR__ . '/../vendor/autoload.php';

class Router
{
    protected $routes = []; 
    protected $loaded = false;

    public function get(string $uri, string $controller, string $action)
    {
        $this->addRoute('GET', $uri, $controller, $action);
    }

    public function post(string $uri, string $controller, string $action)
    {
        $this->addRoute('POST', $uri, $controller, $action);
    }
    private function addRoute(string $method, string $uri, string $controller, string $action)
    {
        $this->routes[$method][$uri] = [
            'controller' => $controller,
            'action' => $action,
        ];
    }

    public function loadRoutes()
    {
        if (!$this->loaded) {
            $this->loaded = true;
            require __DIR__ . '/../routes/web.php';
        }
    }

    public function handleRequest(string $method, string $uri, array $vars = [])
    {
        $this->loadRoutes();

        // Extract query parameters
        $parsedUrl = parse_url($uri);
        $path = $parsedUrl['path'] ?? $uri; // Get the path without query string
        parse_str($parsedUrl['query'] ?? '', $queryParams); // Extract query parameters
        $vars = array_merge($vars, $queryParams); // Merge with existing vars

        if (!isset($this->routes[$method][$path])) {
            return "Error: Route '$path' not found for method '$method'.";
        }

        $route = $this->routes[$method][$path];
        $controllerClass = $route['controller'];
        $actionMethod = $route['action'];

        if (class_exists($controllerClass)) {
            $controller = new $controllerClass();
            if (method_exists($controller, $actionMethod)) {
                return $controller->$actionMethod($vars);
            }

            return "Error: Action '$actionMethod' not found in controller '$controllerClass'.";
        }

        return "Error: Class '$controllerClass' not found.";
    }
}